{"ast":null,"code":"(function (context) {\n  /**\n   * Defines an available color.\n   *\n   * @typedef {Object} ColorSpec\n   * @property {string=} name A name for the color, e.g., 'red'\n   * @property {string} source The hex-based color string, e.g., '#FF0'\n   * @property {RGB} rgb The {@link RGB} color values\n   */\n\n  /**\n   * Describes a matched color.\n   *\n   * @typedef {Object} ColorMatch\n   * @property {string} name The name of the matched color, e.g., 'red'\n   * @property {string} value The hex-based color string, e.g., '#FF0'\n   * @property {RGB} rgb The {@link RGB} color values.\n   */\n\n  /**\n   * Provides the RGB breakdown of a color.\n   *\n   * @typedef {Object} RGB\n   * @property {number} r The red component, from 0 to 255\n   * @property {number} g The green component, from 0 to 255\n   * @property {number} b The blue component, from 0 to 255\n   */\n\n  /**\n   * Gets the nearest color, from the given list of {@link ColorSpec} objects\n   * (which defaults to {@link nearestColor.DEFAULT_COLORS}).\n   *\n   * Probably you wouldn't call this method directly. Instead you'd get a custom\n   * color matcher by calling {@link nearestColor.from}.\n   *\n   * @public\n   * @param {RGB|string} needle Either an {@link RGB} color or a hex-based\n   *     string representing one, e.g., '#FF0'\n   * @param {Array.<ColorSpec>=} colors An optional list of available colors\n   *     (defaults to {@link nearestColor.DEFAULT_COLORS})\n   * @return {ColorMatch|string} If the colors in the provided list had names,\n   *     then a {@link ColorMatch} object with the name and (hex) value of the\n   *     nearest color from the list. Otherwise, simply the hex value.\n   *\n   * @example\n   * nearestColor({ r: 200, g: 50, b: 50 }); // => '#f00'\n   * nearestColor('#f11');                   // => '#f00'\n   * nearestColor('#f88');                   // => '#f80'\n   * nearestColor('#ffe');                   // => '#ff0'\n   * nearestColor('#efe');                   // => '#ff0'\n   * nearestColor('#abc');                   // => '#808'\n   * nearestColor('red');                    // => '#f00'\n   * nearestColor('foo');                    // => throws\n   */\n  function nearestColor(needle, colors) {\n    needle = parseColor(needle);\n    if (!needle) {\n      return null;\n    }\n    var distanceSq,\n      minDistanceSq = Infinity,\n      rgb,\n      value;\n    colors || (colors = nearestColor.DEFAULT_COLORS);\n    for (var i = 0; i < colors.length; ++i) {\n      rgb = colors[i].rgb;\n      distanceSq = Math.pow(needle.r - rgb.r, 2) + Math.pow(needle.g - rgb.g, 2) + Math.pow(needle.b - rgb.b, 2);\n      if (distanceSq < minDistanceSq) {\n        minDistanceSq = distanceSq;\n        value = colors[i];\n      }\n    }\n    if (value.name) {\n      return {\n        name: value.name,\n        value: value.source,\n        rgb: value.rgb,\n        distance: Math.sqrt(minDistanceSq)\n      };\n    }\n    return value.source;\n  }\n\n  /**\n   * Provides a matcher to find the nearest color based on the provided list of\n   * available colors.\n   *\n   * @public\n   * @param {Array.<string>|Object} availableColors An array of hex-based color\n   *     strings, or an object mapping color *names* to hex values.\n   * @return {function(string):ColorMatch|string} A function with the same\n   *     behavior as {@link nearestColor}, but with the list of colors\n   *     predefined.\n   *\n   * @example\n   * var colors = {\n   *   'maroon': '#800',\n   *   'light yellow': { r: 255, g: 255, b: 51 },\n   *   'pale blue': '#def',\n   *   'white': 'fff'\n   * };\n   *\n   * var bgColors = [\n   *   '#eee',\n   *   '#444'\n   * ];\n   *\n   * var invalidColors = {\n   *   'invalid': 'foo'\n   * };\n   *\n   * var getColor = nearestColor.from(colors);\n   * var getBGColor = getColor.from(bgColors);\n   * var getAnyColor = nearestColor.from(colors).or(bgColors);\n   *\n   * getColor('ffe');\n   * // => { name: 'white', value: 'fff', rgb: { r: 255, g: 255, b: 255 }, distance: 17}\n   *\n   * getColor('#f00');\n   * // => { name: 'maroon', value: '#800', rgb: { r: 136, g: 0, b: 0 }, distance: 119}\n   *\n   * getColor('#ff0');\n   * // => { name: 'light yellow', value: '#ffff33', rgb: { r: 255, g: 255, b: 51 }, distance: 51}\n   *\n   * getBGColor('#fff'); // => '#eee'\n   * getBGColor('#000'); // => '#444'\n   *\n   * getAnyColor('#f00');\n   * // => { name: 'maroon', value: '#800', rgb: { r: 136, g: 0, b: 0 }, distance: 119}\n   *\n   * getAnyColor('#888'); // => '#444'\n   *\n   * nearestColor.from(invalidColors); // => throws\n   */\n  nearestColor.from = function from(availableColors) {\n    var colors = mapColors(availableColors),\n      nearestColorBase = nearestColor;\n    var matcher = function nearestColor(hex) {\n      return nearestColorBase(hex, colors);\n    };\n\n    // Keep the 'from' method, to support changing the list of available colors\n    // multiple times without needing to keep a reference to the original\n    // nearestColor function.\n    matcher.from = from;\n\n    // Also provide a way to combine multiple color lists.\n    matcher.or = function or(alternateColors) {\n      var extendedColors = colors.concat(mapColors(alternateColors));\n      return nearestColor.from(extendedColors);\n    };\n    return matcher;\n  };\n\n  /**\n   * Given either an array or object of colors, returns an array of\n   * {@link ColorSpec} objects (with {@link RGB} values).\n   *\n   * @private\n   * @param {Array.<string>|Object} colors An array of hex-based color strings, or\n   *     an object mapping color *names* to hex values.\n   * @return {Array.<ColorSpec>} An array of {@link ColorSpec} objects\n   *     representing the same colors passed in.\n   */\n  function mapColors(colors) {\n    if (colors instanceof Array) {\n      return colors.map(function (color) {\n        return createColorSpec(color);\n      });\n    }\n    return Object.keys(colors).map(function (name) {\n      return createColorSpec(colors[name], name);\n    });\n  }\n  ;\n\n  /**\n   * Parses a color from a string.\n   *\n   * @private\n   * @param {RGB|string} source\n   * @return {RGB}\n   *\n   * @example\n   * parseColor({ r: 3, g: 22, b: 111 }); // => { r: 3, g: 22, b: 111 }\n   * parseColor('#f00');                  // => { r: 255, g: 0, b: 0 }\n   * parseColor('#04fbc8');               // => { r: 4, g: 251, b: 200 }\n   * parseColor('#FF0');                  // => { r: 255, g: 255, b: 0 }\n   * parseColor('rgb(3, 10, 100)');       // => { r: 3, g: 10, b: 100 }\n   * parseColor('rgb(50%, 0%, 50%)');     // => { r: 128, g: 0, b: 128 }\n   * parseColor('aqua');                  // => { r: 0, g: 255, b: 255 }\n   * parseColor('fff');                   // => { r: 255, g: 255, b: 255 }\n   * parseColor('foo');                   // => throws\n   */\n  function parseColor(source) {\n    var red, green, blue;\n    if (typeof source === 'object') {\n      return source;\n    }\n    if (source in nearestColor.STANDARD_COLORS) {\n      return parseColor(nearestColor.STANDARD_COLORS[source]);\n    }\n    var hexMatch = source.match(/^#?((?:[0-9a-f]{3}){1,2})$/i);\n    if (hexMatch) {\n      hexMatch = hexMatch[1];\n      if (hexMatch.length === 3) {\n        hexMatch = [hexMatch.charAt(0) + hexMatch.charAt(0), hexMatch.charAt(1) + hexMatch.charAt(1), hexMatch.charAt(2) + hexMatch.charAt(2)];\n      } else {\n        hexMatch = [hexMatch.substring(0, 2), hexMatch.substring(2, 4), hexMatch.substring(4, 6)];\n      }\n      red = parseInt(hexMatch[0], 16);\n      green = parseInt(hexMatch[1], 16);\n      blue = parseInt(hexMatch[2], 16);\n      return {\n        r: red,\n        g: green,\n        b: blue\n      };\n    }\n    var rgbMatch = source.match(/^rgb\\(\\s*(\\d{1,3}%?),\\s*(\\d{1,3}%?),\\s*(\\d{1,3}%?)\\s*\\)$/i);\n    if (rgbMatch) {\n      red = parseComponentValue(rgbMatch[1]);\n      green = parseComponentValue(rgbMatch[2]);\n      blue = parseComponentValue(rgbMatch[3]);\n      return {\n        r: red,\n        g: green,\n        b: blue\n      };\n    }\n    throw Error('\"' + source + '\" is not a valid color');\n  }\n\n  /**\n   * Creates a {@link ColorSpec} from either a string or an {@link RGB}.\n   *\n   * @private\n   * @param {string|RGB} input\n   * @param {string=} name\n   * @return {ColorSpec}\n   *\n   * @example\n   * createColorSpec('#800'); // => {\n   *   source: '#800',\n   *   rgb: { r: 136, g: 0, b: 0 }\n   * }\n   *\n   * createColorSpec('#800', 'maroon'); // => {\n   *   name: 'maroon',\n   *   source: '#800',\n   *   rgb: { r: 136, g: 0, b: 0 }\n   * }\n   */\n  function createColorSpec(input, name) {\n    var color = {};\n    if (name) {\n      color.name = name;\n    }\n    if (typeof input === 'string') {\n      color.source = input;\n      color.rgb = parseColor(input);\n    } else if (typeof input === 'object') {\n      // This is for if/when we're concatenating lists of colors.\n      if (input.source) {\n        return createColorSpec(input.source, input.name);\n      }\n      color.rgb = input;\n      color.source = rgbToHex(input);\n    }\n    return color;\n  }\n\n  /**\n   * Parses a value between 0-255 from a string.\n   *\n   * @private\n   * @param {string} string\n   * @return {number}\n   *\n   * @example\n   * parseComponentValue('100');  // => 100\n   * parseComponentValue('100%'); // => 255\n   * parseComponentValue('50%');  // => 128\n   */\n  function parseComponentValue(string) {\n    if (string.charAt(string.length - 1) === '%') {\n      return Math.round(parseInt(string, 10) * 255 / 100);\n    }\n    return Number(string);\n  }\n\n  /**\n   * Converts an {@link RGB} color to its hex representation.\n   *\n   * @private\n   * @param {RGB} rgb\n   * @return {string}\n   *\n   * @example\n   * rgbToHex({ r: 255, g: 128, b: 0 }); // => '#ff8000'\n   */\n  function rgbToHex(rgb) {\n    return '#' + leadingZero(rgb.r.toString(16)) + leadingZero(rgb.g.toString(16)) + leadingZero(rgb.b.toString(16));\n  }\n\n  /**\n   * Puts a 0 in front of a numeric string if it's only one digit. Otherwise\n   * nothing (just returns the value passed in).\n   *\n   * @private\n   * @param {string} value\n   * @return\n   *\n   * @example\n   * leadingZero('1');  // => '01'\n   * leadingZero('12'); // => '12'\n   */\n  function leadingZero(value) {\n    if (value.length === 1) {\n      value = '0' + value;\n    }\n    return value;\n  }\n\n  /**\n   * A map from the names of standard CSS colors to their hex values.\n   */\n  nearestColor.STANDARD_COLORS = {\n    aqua: '#0ff',\n    black: '#000',\n    blue: '#00f',\n    fuchsia: '#f0f',\n    gray: '#808080',\n    green: '#008000',\n    lime: '#0f0',\n    maroon: '#800000',\n    navy: '#000080',\n    olive: '#808000',\n    orange: '#ffa500',\n    purple: '#800080',\n    red: '#f00',\n    silver: '#c0c0c0',\n    teal: '#008080',\n    white: '#fff',\n    yellow: '#ff0'\n  };\n\n  /**\n   * Default colors. Comprises the colors of the rainbow (good ol' ROY G. BIV).\n   * This list will be used for calls to {@nearestColor} that don't specify a list\n   * of available colors to match.\n   */\n  nearestColor.DEFAULT_COLORS = mapColors(['#f00',\n  // r\n  '#f80',\n  // o\n  '#ff0',\n  // y\n  '#0f0',\n  // g\n  '#00f',\n  // b\n  '#008',\n  // i\n  '#808' // v\n  ]);\n\n  nearestColor.VERSION = '0.4.4';\n  if (typeof module === 'object' && module && module.exports) {\n    module.exports = nearestColor;\n  } else {\n    context.nearestColor = nearestColor;\n  }\n})(this);","map":{"version":3,"names":["context","nearestColor","needle","colors","parseColor","distanceSq","minDistanceSq","Infinity","rgb","value","DEFAULT_COLORS","i","length","Math","pow","r","g","b","name","source","distance","sqrt","from","availableColors","mapColors","nearestColorBase","matcher","hex","or","alternateColors","extendedColors","concat","Array","map","color","createColorSpec","Object","keys","red","green","blue","STANDARD_COLORS","hexMatch","match","charAt","substring","parseInt","rgbMatch","parseComponentValue","Error","input","rgbToHex","string","round","Number","leadingZero","toString","aqua","black","fuchsia","gray","lime","maroon","navy","olive","orange","purple","silver","teal","white","yellow","VERSION","module","exports"],"sources":["/Users/samsadrazodi/Desktop/Bootcamp/41_React_Router/41.2_React-Router_Patterns/exercise/color-factory/node_modules/nearest-color/nearestColor.js"],"sourcesContent":["(function(context) {\n\n  /**\n   * Defines an available color.\n   *\n   * @typedef {Object} ColorSpec\n   * @property {string=} name A name for the color, e.g., 'red'\n   * @property {string} source The hex-based color string, e.g., '#FF0'\n   * @property {RGB} rgb The {@link RGB} color values\n   */\n\n  /**\n   * Describes a matched color.\n   *\n   * @typedef {Object} ColorMatch\n   * @property {string} name The name of the matched color, e.g., 'red'\n   * @property {string} value The hex-based color string, e.g., '#FF0'\n   * @property {RGB} rgb The {@link RGB} color values.\n   */\n\n  /**\n   * Provides the RGB breakdown of a color.\n   *\n   * @typedef {Object} RGB\n   * @property {number} r The red component, from 0 to 255\n   * @property {number} g The green component, from 0 to 255\n   * @property {number} b The blue component, from 0 to 255\n   */\n\n  /**\n   * Gets the nearest color, from the given list of {@link ColorSpec} objects\n   * (which defaults to {@link nearestColor.DEFAULT_COLORS}).\n   *\n   * Probably you wouldn't call this method directly. Instead you'd get a custom\n   * color matcher by calling {@link nearestColor.from}.\n   *\n   * @public\n   * @param {RGB|string} needle Either an {@link RGB} color or a hex-based\n   *     string representing one, e.g., '#FF0'\n   * @param {Array.<ColorSpec>=} colors An optional list of available colors\n   *     (defaults to {@link nearestColor.DEFAULT_COLORS})\n   * @return {ColorMatch|string} If the colors in the provided list had names,\n   *     then a {@link ColorMatch} object with the name and (hex) value of the\n   *     nearest color from the list. Otherwise, simply the hex value.\n   *\n   * @example\n   * nearestColor({ r: 200, g: 50, b: 50 }); // => '#f00'\n   * nearestColor('#f11');                   // => '#f00'\n   * nearestColor('#f88');                   // => '#f80'\n   * nearestColor('#ffe');                   // => '#ff0'\n   * nearestColor('#efe');                   // => '#ff0'\n   * nearestColor('#abc');                   // => '#808'\n   * nearestColor('red');                    // => '#f00'\n   * nearestColor('foo');                    // => throws\n   */\n  function nearestColor(needle, colors) {\n    needle = parseColor(needle);\n\n    if (!needle) {\n      return null;\n    }\n\n    var distanceSq,\n        minDistanceSq = Infinity,\n        rgb,\n        value;\n\n    colors || (colors = nearestColor.DEFAULT_COLORS);\n\n    for (var i = 0; i < colors.length; ++i) {\n      rgb = colors[i].rgb;\n\n      distanceSq = (\n        Math.pow(needle.r - rgb.r, 2) +\n        Math.pow(needle.g - rgb.g, 2) +\n        Math.pow(needle.b - rgb.b, 2)\n      );\n\n      if (distanceSq < minDistanceSq) {\n        minDistanceSq = distanceSq;\n        value = colors[i];\n      }\n    }\n\n    if (value.name) {\n      return {\n        name: value.name,\n        value: value.source,\n        rgb: value.rgb,\n        distance: Math.sqrt(minDistanceSq)\n      };\n    }\n\n    return value.source;\n  }\n\n  /**\n   * Provides a matcher to find the nearest color based on the provided list of\n   * available colors.\n   *\n   * @public\n   * @param {Array.<string>|Object} availableColors An array of hex-based color\n   *     strings, or an object mapping color *names* to hex values.\n   * @return {function(string):ColorMatch|string} A function with the same\n   *     behavior as {@link nearestColor}, but with the list of colors\n   *     predefined.\n   *\n   * @example\n   * var colors = {\n   *   'maroon': '#800',\n   *   'light yellow': { r: 255, g: 255, b: 51 },\n   *   'pale blue': '#def',\n   *   'white': 'fff'\n   * };\n   *\n   * var bgColors = [\n   *   '#eee',\n   *   '#444'\n   * ];\n   *\n   * var invalidColors = {\n   *   'invalid': 'foo'\n   * };\n   *\n   * var getColor = nearestColor.from(colors);\n   * var getBGColor = getColor.from(bgColors);\n   * var getAnyColor = nearestColor.from(colors).or(bgColors);\n   *\n   * getColor('ffe');\n   * // => { name: 'white', value: 'fff', rgb: { r: 255, g: 255, b: 255 }, distance: 17}\n   *\n   * getColor('#f00');\n   * // => { name: 'maroon', value: '#800', rgb: { r: 136, g: 0, b: 0 }, distance: 119}\n   *\n   * getColor('#ff0');\n   * // => { name: 'light yellow', value: '#ffff33', rgb: { r: 255, g: 255, b: 51 }, distance: 51}\n   *\n   * getBGColor('#fff'); // => '#eee'\n   * getBGColor('#000'); // => '#444'\n   *\n   * getAnyColor('#f00');\n   * // => { name: 'maroon', value: '#800', rgb: { r: 136, g: 0, b: 0 }, distance: 119}\n   *\n   * getAnyColor('#888'); // => '#444'\n   *\n   * nearestColor.from(invalidColors); // => throws\n   */\n  nearestColor.from = function from(availableColors) {\n    var colors = mapColors(availableColors),\n        nearestColorBase = nearestColor;\n\n    var matcher = function nearestColor(hex) {\n      return nearestColorBase(hex, colors);\n    };\n\n    // Keep the 'from' method, to support changing the list of available colors\n    // multiple times without needing to keep a reference to the original\n    // nearestColor function.\n    matcher.from = from;\n\n    // Also provide a way to combine multiple color lists.\n    matcher.or = function or(alternateColors) {\n      var extendedColors = colors.concat(mapColors(alternateColors));\n      return nearestColor.from(extendedColors);\n    };\n\n    return matcher;\n  };\n\n  /**\n   * Given either an array or object of colors, returns an array of\n   * {@link ColorSpec} objects (with {@link RGB} values).\n   *\n   * @private\n   * @param {Array.<string>|Object} colors An array of hex-based color strings, or\n   *     an object mapping color *names* to hex values.\n   * @return {Array.<ColorSpec>} An array of {@link ColorSpec} objects\n   *     representing the same colors passed in.\n   */\n  function mapColors(colors) {\n    if (colors instanceof Array) {\n      return colors.map(function(color) {\n        return createColorSpec(color);\n      });\n    }\n\n    return Object.keys(colors).map(function(name) {\n      return createColorSpec(colors[name], name);\n    });\n  };\n\n  /**\n   * Parses a color from a string.\n   *\n   * @private\n   * @param {RGB|string} source\n   * @return {RGB}\n   *\n   * @example\n   * parseColor({ r: 3, g: 22, b: 111 }); // => { r: 3, g: 22, b: 111 }\n   * parseColor('#f00');                  // => { r: 255, g: 0, b: 0 }\n   * parseColor('#04fbc8');               // => { r: 4, g: 251, b: 200 }\n   * parseColor('#FF0');                  // => { r: 255, g: 255, b: 0 }\n   * parseColor('rgb(3, 10, 100)');       // => { r: 3, g: 10, b: 100 }\n   * parseColor('rgb(50%, 0%, 50%)');     // => { r: 128, g: 0, b: 128 }\n   * parseColor('aqua');                  // => { r: 0, g: 255, b: 255 }\n   * parseColor('fff');                   // => { r: 255, g: 255, b: 255 }\n   * parseColor('foo');                   // => throws\n   */\n  function parseColor(source) {\n    var red, green, blue;\n\n    if (typeof source === 'object') {\n      return source;\n    }\n\n    if (source in nearestColor.STANDARD_COLORS) {\n      return parseColor(nearestColor.STANDARD_COLORS[source]);\n    }\n\n    var hexMatch = source.match(/^#?((?:[0-9a-f]{3}){1,2})$/i);\n    if (hexMatch) {\n      hexMatch = hexMatch[1];\n\n      if (hexMatch.length === 3) {\n        hexMatch = [\n          hexMatch.charAt(0) + hexMatch.charAt(0),\n          hexMatch.charAt(1) + hexMatch.charAt(1),\n          hexMatch.charAt(2) + hexMatch.charAt(2)\n        ];\n\n      } else {\n        hexMatch = [\n          hexMatch.substring(0, 2),\n          hexMatch.substring(2, 4),\n          hexMatch.substring(4, 6)\n        ];\n      }\n\n      red = parseInt(hexMatch[0], 16);\n      green = parseInt(hexMatch[1], 16);\n      blue = parseInt(hexMatch[2], 16);\n\n      return { r: red, g: green, b: blue };\n    }\n\n    var rgbMatch = source.match(/^rgb\\(\\s*(\\d{1,3}%?),\\s*(\\d{1,3}%?),\\s*(\\d{1,3}%?)\\s*\\)$/i);\n    if (rgbMatch) {\n      red = parseComponentValue(rgbMatch[1]);\n      green = parseComponentValue(rgbMatch[2]);\n      blue = parseComponentValue(rgbMatch[3]);\n\n      return { r: red, g: green, b: blue };\n    }\n\n    throw Error('\"' + source + '\" is not a valid color');\n  }\n\n  /**\n   * Creates a {@link ColorSpec} from either a string or an {@link RGB}.\n   *\n   * @private\n   * @param {string|RGB} input\n   * @param {string=} name\n   * @return {ColorSpec}\n   *\n   * @example\n   * createColorSpec('#800'); // => {\n   *   source: '#800',\n   *   rgb: { r: 136, g: 0, b: 0 }\n   * }\n   *\n   * createColorSpec('#800', 'maroon'); // => {\n   *   name: 'maroon',\n   *   source: '#800',\n   *   rgb: { r: 136, g: 0, b: 0 }\n   * }\n   */\n  function createColorSpec(input, name) {\n    var color = {};\n\n    if (name) {\n      color.name = name;\n    }\n\n    if (typeof input === 'string') {\n      color.source = input;\n      color.rgb = parseColor(input);\n\n    } else if (typeof input === 'object') {\n      // This is for if/when we're concatenating lists of colors.\n      if (input.source) {\n        return createColorSpec(input.source, input.name);\n      }\n\n      color.rgb = input;\n      color.source = rgbToHex(input);\n    }\n\n    return color;\n  }\n\n  /**\n   * Parses a value between 0-255 from a string.\n   *\n   * @private\n   * @param {string} string\n   * @return {number}\n   *\n   * @example\n   * parseComponentValue('100');  // => 100\n   * parseComponentValue('100%'); // => 255\n   * parseComponentValue('50%');  // => 128\n   */\n  function parseComponentValue(string) {\n    if (string.charAt(string.length - 1) === '%') {\n      return Math.round(parseInt(string, 10) * 255 / 100);\n    }\n\n    return Number(string);\n  }\n\n  /**\n   * Converts an {@link RGB} color to its hex representation.\n   *\n   * @private\n   * @param {RGB} rgb\n   * @return {string}\n   *\n   * @example\n   * rgbToHex({ r: 255, g: 128, b: 0 }); // => '#ff8000'\n   */\n  function rgbToHex(rgb) {\n    return '#' + leadingZero(rgb.r.toString(16)) +\n      leadingZero(rgb.g.toString(16)) + leadingZero(rgb.b.toString(16));\n  }\n\n  /**\n   * Puts a 0 in front of a numeric string if it's only one digit. Otherwise\n   * nothing (just returns the value passed in).\n   *\n   * @private\n   * @param {string} value\n   * @return\n   *\n   * @example\n   * leadingZero('1');  // => '01'\n   * leadingZero('12'); // => '12'\n   */\n  function leadingZero(value) {\n    if (value.length === 1) {\n      value = '0' + value;\n    }\n    return value;\n  }\n\n  /**\n   * A map from the names of standard CSS colors to their hex values.\n   */\n  nearestColor.STANDARD_COLORS = {\n    aqua: '#0ff',\n    black: '#000',\n    blue: '#00f',\n    fuchsia: '#f0f',\n    gray: '#808080',\n    green: '#008000',\n    lime: '#0f0',\n    maroon: '#800000',\n    navy: '#000080',\n    olive: '#808000',\n    orange: '#ffa500',\n    purple: '#800080',\n    red: '#f00',\n    silver: '#c0c0c0',\n    teal: '#008080',\n    white: '#fff',\n    yellow: '#ff0'\n  };\n\n  /**\n   * Default colors. Comprises the colors of the rainbow (good ol' ROY G. BIV).\n   * This list will be used for calls to {@nearestColor} that don't specify a list\n   * of available colors to match.\n   */\n  nearestColor.DEFAULT_COLORS = mapColors([\n    '#f00', // r\n    '#f80', // o\n    '#ff0', // y\n    '#0f0', // g\n    '#00f', // b\n    '#008', // i\n    '#808'  // v\n  ]);\n\n  nearestColor.VERSION = '0.4.4';\n\n  if (typeof module === 'object' && module && module.exports) {\n    module.exports = nearestColor;\n  } else {\n    context.nearestColor = nearestColor;\n  }\n\n}(this));\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}